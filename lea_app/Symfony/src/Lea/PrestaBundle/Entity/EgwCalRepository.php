<?php

namespace Lea\PrestaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EgwCalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EgwCalRepository extends EntityRepository
{
	
		public function getRdvSql ($account_id =null ,$dateDebut =null , $idPrestation = null ,$calUserType =null , $dateFin = null)
		{
			$sqlPlus = null;
			if($account_id!=null)
			$sqlPlus .=" and us.cal_user_id =".$account_id." ";
			
			if($dateDebut!=null)
			$sqlPlus .=" and u.cal_start>=".$dateDebut." ";
			
			if($dateFin!=null)
			$sql .=" and u.cal_end<=".$dateFin." ";
			//$sql .=" and u.cal_start<=".$dateFin." ";


			
			if($idPrestation!=null)
			$sqlPlus .=" and us.id_prestation=".$idPrestation." ";
			
			if($calUserType!=null)
			$sqlPlus .=" and us.cal_user_type='".$calUserType."' ";
			
			$sqlPlus="	SELECT c.*,u.*,us.* FROM egw_cal c
					INNER JOIN egw_cal_dates d on d.cal_id = c.cal_id
					inner join egw_cal_user u on u.cal_id = c.cal_id
					WHERE c.cal_id!=0   
					".$sqlPlus."";


			
		$query = $this->getEntityManager()->createNativeQuery($sql);
		//$query->setParameter(1, 'romanb');
		
		return $query->getResult();
		}
		public function getRdv($account_id =null ,$dateDebut =null , $idPrestation = null ,$calUserType =null , $dateFin = null)
		{
			$dqlPlus = null;
			if($account_id!=null)
			$dqlPlus .=" and us.calUserId =".$account_id." ";
			
			if($dateDebut!=null)
			$dqlPlus .=" and u.calStart>".$dateDebut." ";
			
			if($dateFin!=null)
			$dqlPlus .=" and u.calEnd<=".$dateFin." ";
			//$dqlPlus .=" and u.calStart<=".$dateFin." ";
			
			if($idPrestation!=null)
			$dqlPlus .=" and us.idPrestation=".$idPrestation." ";
			
			if($calUserType!=null)
			$dqlPlus .=" and us.calUserType='".$calUserType."' ";
			
			$dql="	SELECT c,u,us FROM LeaPrestaBundle:EgwCal c
					INNER JOIN c.egwCalIdDates u
					inner join c.egwCalIdUser us
					WHERE c.calId!=0   
					".$dqlPlus."";
			
			error_log($dql);
			return $this->getEntityManager()
					->createQuery($dql)
					->getResult();
			
		}
		public function getNbParticipants($calId,$calUserType = null)
		{
			$dqlPlus = null;
			
			if($calUserType!=null)
			$dqlPlus =" and c.calUserType = '".$calUserType."'";
			
			$dql="	SELECT count(c.calId) as nb FROM LeaPrestaBundle:EgwCalUser c
					WHERE 
					c.calId=".$calId."
					".$dqlPlus."";
			
		
			return $this->getEntityManager()
					->createQuery($dql)
					->getSingleResult();
			
		}
		public function getOption($account_id,$dateDebut,$libellePrestation = null)
		{
			$sqlPlus = null;
			
			if($libellePrestation!=null)
			$sqlPlus =" and c.calTitle like '%".$libellePrestation."%'";
			
			// SPIREA-YLF - Modification du filtre pour prendre le participant et pas le propriÃ©taire
			if($account_id!=null && is_numeric($account_id))
				$sqlPlus .=" and u.calUserId=".$account_id;
			
			
			// SPIREA-YLF - Ajout de la relation avec la classe egwCalUser via egwCalIdUser (pour filtre participant)
			$dql = "SELECT c,d FROM LeaPrestaBundle:EgwCal c
					INNER JOIN c.egwCalIdDates d 
					INNER JOIN c.egwCalIdUser u 
					WHERE d.calStart>=".$dateDebut."
					and c.calTitle like '%option%' 
					".$sqlPlus." 
					order by d.calStart asc";
			
		
			return $this->getEntityManager()
					->createQuery($dql)
					->getResult();
			
		}
	public function lastId()
		{
			
			/*$dql="	SELECT cal_id FROM LeaPrestaBundle:EgwCal c
					order by cal_id desc
					limit 0,1";
			
			
			return $this->getEntityManager()
					->createQuery($dql)
					->getSingleResult();*/
			return $this->createQueryBuilder('c')
						->orderBy('c.calId', 'DESC')
						->setMaxResults(1)
						->getQuery()
						->getSingleResult();
			
		}
}
